@{
    Layout = null;
}
@model SupplierInfoModel

<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
	<script type="text/javascript" src="https://www.bing.com/api/maps/mapcontrol?key=ApFkiZUGSuNuTphyHstPFnkvL0IGwOKelabezyQVt4RwYTD-yE5n5dMgmeHugQgN"></script>
	<style>
		.field-validation-valid {
			display: none;
		}

		.validation-summary-valid {
			display: none;
		}

		table {
			width: 100%; /* Set the table width to 100% of the container */
		}

			table td {
				padding: 5px;
			}

		td.column2 {
			width: 50%; /* Set the second column to occupy 50% of the table's width */
			vertical-align: top; /* Align content to the top of the cell */
		}

		#map {
			height: 100%; /* Fit the image to the height of the four rows */
			width: 100%; /* Fit the image to the width of its container */
		}

		.datepicker {
			display: inline-block;
		}
	</style>
    <meta charset="UTF-8">
    <title> Edit Account </title>
	<link rel="stylesheet" href="~/css/newAdminAddContractor.css" asp-append-version="true" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>
<body>

    <div class="container">
		<a class="dashboard-link" asp-area="" asp-controller="Admin" asp-action="adminProjectDash">
            <div class="main-top">
                <i class="fas fa-user"></i>
            </div>
        </a>
        <div class="title">Edit Account</div>
        <div class="content">
			@using (Html.BeginForm("supplierInfoEdit", "Supplier", FormMethod.Post, new { @id = "myForm" }))
			{
				<div class="user-details">
					@Html.AntiForgeryToken()

					@Html.ValidationSummary(true, "", new { @class = "text-danger" })

					<div class="input-box">
						@Html.LabelFor(m => m.Username, new { @class = "details" })
						<div class="col-md-10">
							@Html.TextBoxFor(m => m.Username, new { @class = "text-input", @readonly = "true" })
							@Html.ValidationMessageFor(m => m.Username, "Enter a Username", new { @class = "" })
						</div>
					</div>

					<div class="input-box">
						@Html.LabelFor(m => m.Password, new { @class = "details" })
						<div class="col-md-10">
							@Html.PasswordFor(m => m.Password, new { @class = "text-input" })
							@Html.ValidationMessageFor(m => m.Password, "Enter a Password", new { @class = "text-danger" })
						</div>
					</div>

					<div class="input-box">
						@Html.LabelFor(m => m.Description, new { @class = "details" })
						<div class="col-md-10">
							@Html.TextBoxFor(m => m.Description, new { @class = "text-input" })
							@Html.ValidationMessageFor(m => m.Description, "Enter Supplier description", new { @class = "text-danger" })
						</div>
					</div>

					<div class="input-box">
						@Html.LabelFor(m => m.ContactName, new { @class = "details" })
						<div class="col-md-10">
							@Html.TextBoxFor(m => m.ContactName, new { @class = "text-input" })
							@Html.ValidationMessageFor(m => m.ContactName, "Enter a name", new { @class = "text-danger" })
						</div>
					</div>

					<div class="input-box">
						@Html.LabelFor(m => m.ContactNumber, new { @class = "details" })
						<div class="col-md-10">
							@Html.TextBoxFor(m => m.ContactNumber, new { @class = "text-input" })
							@Html.ValidationMessageFor(m => m.ContactNumber, "Enter a name", new { @class = "text-danger" })
						</div>
					</div>

					<div class="input-box">
					</div>

					<div class="input-box" style="display: none">
						<span class="details">Street</span>
						@Html.TextBoxFor(m=>m.Address, new { @class = "form-control", @id="address"  })
					</div>
					<div class="input-box" style="display: none">
						<span class="details">City</span>
						@Html.TextBoxFor(m=>m.City, new { @class = "form-control", @id="city"  })
					</div>
					<div class="input-box" style="display: none">
						<span class="details">Region</span>
						@Html.TextBoxFor(m=>m.Region, new { @class = "form-control" , @id="AdminDistrict" })
					</div>
					<div class="input-box" style="display: none">
						<span class="details">Country</span>
						@Html.TextBoxFor(m=>m.Country, new { @class = "form-control", @id="Country" })
					</div>
				</div>

				<div>
					<div class="input-box">
						<input type="text" id="searchInput" placeholder="Enter a location and press Enter" style="
								height: 45px;
								width: 100%;
								outline: none;
								font-size: 16px;
								border-radius: 5px;
								padding-left: 15px;
								border: 1px solid #ccc;
								border-bottom-width: 2px;
								transition: all 0.3s ease;
						">
					</div>
					<div class="map" id="myMap" style="position:relative;width:100%;height:600px;"></div>
					@Html.HiddenFor(m=>m.Latitude, new { @class = "form-control", @id="latitude"})
					@Html.HiddenFor(m=>m.Longtitude, new { @class = "form-control", @id="longtitude" })
					<br>
					<div class="input-box">
						<span class="details">Address</span>
						<input type="text" id="fullAddress" placeholder="Use the search bar or select from the map" style="
								height: 45px;
								width: 100%;
								outline: none;
								font-size: 16px;
								border-radius: 5px;
								padding-left: 15px;
								border: 1px solid #ccc;
								border-bottom-width: 2px;
								transition: all 0.3s ease;
						" value="@Model.Address @Model.City @Model.Region @Model.Country">
					</div>
				</div>

				<div class="button">
					<input type="submit" value="Submit" />
				</div>
			}
		</div>
		<link href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" rel="stylesheet">
		<script src="//code.jquery.com/jquery-3.6.0.min.js"></script>
		<script src="//code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
		<script>
			$(function () {
				$(".datepicker").datepicker();
			});
			var map;
			//var latitude = parseFloat(document.getElementById('latitude').value);
			//var longtitude = parseFloat(document.getElementById('longtitude').value);
			function loadMapScenario() {
				map = new Microsoft.Maps.Map(document.getElementById('myMap'), {
					credentials: 'ApFkiZUGSuNuTphyHstPFnkvL0IGwOKelabezyQVt4RwYTD-yE5n5dMgmeHugQgN',
					center: new Microsoft.Maps.Location(14.552120, 121.056068), // Initial location (latitude, longitude)
					//center: new Microsoft.Maps.Location(latitude, longtitude), // Initial location (latitude, longitude)
					zoom: 12 // Initial zoom level

				});

				//var pushpin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(parseFloat(document.getElementById('latitude').value), parseFloat(document.getElementById('longtitude').value)));
				//map.entities.push(pushpin);

				Microsoft.Maps.Events.addHandler(map, 'click', function (e) {
					var point = new Microsoft.Maps.Point(e.getX(), e.getY());
					var location = e.target.tryPixelToLocation(point);
					reverseGeocode(location);
				});
				function reverseGeocode(location) {
					var apiUrl = `https://dev.virtualearth.net/REST/v1/Locations/${location.latitude},${location.longitude}?key=ApFkiZUGSuNuTphyHstPFnkvL0IGwOKelabezyQVt4RwYTD-yE5n5dMgmeHugQgN`;

					fetch(apiUrl)
						.then(response => response.json())
						.then(data => {
							if (data.resourceSets.length > 0 && data.resourceSets[0].resources.length > 0) {
								var address = data.resourceSets[0].resources[0].address.formattedAddress;

								document.getElementById('fullAddress').value = address;
								document.getElementById('address').value = data.resourceSets[0].resources[0].address.addressLine;
								document.getElementById('city').value = data.resourceSets[0].resources[0].address.locality;
								document.getElementById('AdminDistrict').value = data.resourceSets[0].resources[0].address.adminDistrict;
								document.getElementById('Country').value = data.resourceSets[0].resources[0].address.countryRegion;
								document.getElementById('longtitude').value = location.longitude;
								document.getElementById('latitude').value = location.latitude;

								map.entities.removeAt(0);
								var pushpin = new Microsoft.Maps.Pushpin(location);
								map.entities.push(pushpin);
							}
						})
						.catch(error => {
							console.error('Error:', error);
						});
				}
				document.getElementById('searchInput').addEventListener('keyup', function (event) {
					if (event.key === 'Enter') {
						performLocationSearch();
						console.log('helvete');
					}
				});
				function performLocationSearch() {
					var query = document.getElementById('searchInput').value;
					Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {
						var searchManager = new Microsoft.Maps.Search.SearchManager(map);
						var requestOptions = {
							bounds: map.getBounds(),
							where: query,
							callback: function (answer, userData) {
								map.setView({ bounds: answer.results[0].bestView });
								map.entities.removeAt(0);
								map.entities.push(new Microsoft.Maps.Pushpin(answer.results[0].location));
							}
						};
						searchManager.geocode(requestOptions);
						searchManager.geocode({
							where: query,
							callback: function (results) {
								if (results && results.results && results.results.length > 0) {
									var firstResult = results.results[0];
									var location = firstResult.location;
									var address = firstResult.address;

									// Populate input fields with address components and coordinates
									document.getElementById('fullAddress').value = address.formattedAddress || '';
									document.getElementById('address').value = address.addressLine || '';
									document.getElementById('city').value = address.locality || '';
									document.getElementById('AdminDistrict').value = address.adminDistrict || '';
									document.getElementById('Country').value = address.countryRegion || '';
									document.getElementById('latitude').value = location.latitude;
									document.getElementById('longtitude').value = location.longitude;
								}
							}
						});
					});

					console.log('helvete');
					// Perform the location search
					/*searchManager.geocode({
						where: query,
						callback: function (results) {
							if (results && results.results && results.results.length > 0) {
								var firstResult = results.results[0];
								var location = firstResult.location;
								var address = firstResult.address;

								// Populate input fields with address components and coordinates
								document.getElementById('address').value = address.addressLine || '';
								document.getElementById('city').value = address.locality || '';
								document.getElementById('AdminDistrict').value = address.adminDistrict || '';
								document.getElementById('Country').value = address.countryRegion || '';
								document.getElementById('latitude').value = location.latitude;
								document.getElementById('longtitude').value = location.longitude;
							}
						}
					});*/
				}

			}



			const body = document.querySelector('body');
			body.onload = loadMapScenario;

		</script>
		<script>
			document.getElementById('myForm').addEventListener('keypress', function (e) {
				if (e.key === 'Enter') {
					e.preventDefault(); // Prevent the form from submitting
				}
			});
		</script>
		<script src="@Url.Content("~/Scripts/jquery.validate.js")" type="text/javascript"></script>
		<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")" type="text/javascript"></script>

	</body>
</html>