@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
	int numOfItems = 0;
	int numOfItems2 = 0;
	Layout = null;
	}
	@model EmployeeBOMModel
<head>
	<script>
			.field - validation - valid {
			display: none;
		}

			.validation - summary - valid {
			display: none;
		}
	</script>

	<style>
		.a-button {
			padding: 10px 20px 10px 20px;
			border: solid;
			border-color: black
		}

		.scroll {
			width: 100%;
			height: 40%;
			overflow: auto;
			white-space: nowrap;
		}
	</style>

	<meta charset="UTF-8" />
	<title> Templates </title>
	<link rel="icon" type="images/png" img src="../../Images/greenAsiaLogo.png" alt="logo" />

	<link rel="stylesheet" href="~/css/project.css" asp-append-version="true" />

	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
</head>

<body>
	<div class="container">
		<nav>
			<ul>
				<li>
					<a class="logo" asp-area="" asp-controller="Employee" asp-action="employeeDashboard">
						<img src="../../Images/greenAsiaLogo.png" alt="logo">
						<span class="nav-item">GACTC</span>
					</a>
				</li>
				<li>
					<a class="nav-link" asp-area="" asp-controller="Employee" asp-action="employeeDashboard">
						<i class="fas fa-menorah"></i>
						<span class="nav-item">Dashboard</span>
					</a>
				</li>
				<li class="active">
					<a class="nav-link" asp-area="" asp-controller="Employee" asp-action="employeeProjectDash">
						<i class="fas fa-chart-bar"></i>
						<span class="nav-item">Projects</span>
					</a>
				</li>
				<li>
					<a class="nav-link" asp-area="" asp-controller="Employee" asp-action="Templates">
						<i class="fas fa-briefcase"></i>
						<span class="nav-item">Templates</span>
					</a>
				</li>
				<li>
					<a class="nav-link" asp-area="" asp-controller="Employee" asp-action="employeeSupplierDash">
						<i class="fas fa-briefcase"></i>
						<span class="nav-item">Suppliers</span>
					</a>
				</li>
				<li>
					<a class="nav-link" asp-area="" asp-controller="Employee" asp-action="employeeMaterialsDash">
						<i class="fas fa-briefcase"></i>
						<span class="nav-item">Materials</span>
					</a>
				</li>
				<li>
					<a class="nav-link" asp-area="" asp-controller="Employee" asp-action="employeeInfo">
						<i class="fas fa-briefcase"></i>
						<span class="nav-item">Account</span>
					</a>
				</li>
				<li>
					<a class="nav-link" asp-area="" asp-controller="Home" asp-action="HomePage">
						<i class="fas fa-sign-out-alt"></i>
						<span class="nav-item">Log out</span>
					</a>
				</li>
			</ul>
		</nav>

		<section class="main">
			<section class="attendance">
				<div class="attendance-list">
					<table style="width:100%">
						<tr>
							<td>
								<div style="width:50%">
									<h4>Project Title</h4>
									<p style="text-indent:20pt;">@Model.Title</p>
								</div>
							</td>
							<td>
								<div style="width:50%">
									<h4>Client Name</h4>
									<p style="text-indent:20pt;">@Model.ClientName</p>
								</div>
							</td>
						</tr>
						<tr>
							<td>
								<div>
									<h4>Project Date</h4>
									<p style="text-indent:20pt;">@Model.Date.ToString("dd-MMMM-yyyy")</p>
								</div>
							</td>
							<td>
								<div>
									<h4>Client Contact</h4>
									<p style="text-indent:20pt;">@Model.ClientContact</p>
								</div>
							</td>
						</tr>
						<tr>
							<td>
								<div>
									<h4>Project Address</h4>
									<p style="text-indent:20pt;"><span>@Model.Address</span>, <span>@Model.City</span>, <span>@Model.Region</span>, <span>@Model.Country</span></p></p>
								</div>
							</td>
							<td>
								<div>
								</div>
							</td>
						</tr>
						<tr>
							<td>
								<div>
									<h4>Building type</h4>
									<p style="text-indent:20pt;">@Model.BuildingType</p>
								</div>
							</td>
							<td>
								<div>
									<h4>Building number of storeys</h4>
									<p style="text-indent:20pt;">@Model.NumberOfStoreys</p>
								</div>
							</td>
						</tr>
						<tr>
							<td>
								<div>
									<h4>Building dimensions</h4>
									<p style="text-indent:20pt;">@Model.BuildingLength Metres by @Model.BuildingWidth Metres</p>
								</div>
							</td>
							<td>
								<div>
									<h4>Building floor height</h4>
									<p style="text-indent:20pt;">@Model.FloorHeight</p>
								</div>
							</td>
						</tr>
					</table>
					@using (Html.BeginForm("BOMAdd", "Employee", FormMethod.Post))
					{

						<div style="display: none">
							@Html.DisplayFor(m=>m.templates)
							@for (int x = 0; x < Model.templates.Count; x++)
							{
								@Html.HiddenFor(m=>m.templates[x])
								@Html.HiddenFor(m=>m.templates[x].ID)
								@Html.HiddenFor(m=>m.templates[x].Description)
							}

							@Html.DisplayFor(m=>m.materialpicker)
							@for (int x = 0; x < Model.materialpicker.Count; x++)
							{
								@Html.HiddenFor(m=>m.materialpicker[x])
								@Html.HiddenFor(m=>m.materialpicker[x].ID)
								@Html.HiddenFor(m=>m.materialpicker[x].Description)
								@Html.HiddenFor(m=>m.materialpicker[x].IsChecked)
							}

							@Html.DisplayFor(m=>m.suppliers)
							@for (int x = 0; x < Model.suppliers.Count; x++)
							{
								@Html.HiddenFor(m=>m.suppliers[x])
								@Html.HiddenFor(m=>m.suppliers[x].ID)
								@Html.HiddenFor(m=>m.suppliers[x].Description)
								@Html.HiddenFor(m=>m.suppliers[x].ContactName)
								@Html.HiddenFor(m=>m.suppliers[x].ContactNumber)
							}

							@Html.DisplayFor(m=>m.lists)

							@for (int i = 0; i < Model.lists.Count; i++)
							{
								@Html.HiddenFor(m=>m.lists[i])
								@Html.HiddenFor(m=>m.lists[i].Description)
								@Html.HiddenFor(m=>m.lists[i].ListNumber)
								@Html.HiddenFor(m=>m.lists[i].ListLetter)
								@Html.DisplayFor(m=>m.lists[i].Items)

								@for (int x = 0; x < Model.lists[i].Items.Count; x++)
								{

									@Html.HiddenFor(m=>m.lists[i].Items[x])
									@Html.HiddenFor(m=>m.lists[i].Items[x].ItemNumber)
									@Html.HiddenFor(m=>m.lists[i].Items[x].Description)
									@Html.DisplayFor(m=>m.lists[i].Items[x].Subitems)

									@for (int y = 0; y < Model.lists[i].Items[x].Subitems.Count; y++)
									{
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y])
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y].SubitemNumber)
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y].MaterialID)
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y].MaterialDesc)
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y].MaterialQuantity)
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y].MaterialQuantityWastage)
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y].MaterialQuantityProvisions)
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y].MaterialUoM)
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y].MaterialCost)
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y].MarkedUpCost)
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y].MaterialAmount, new { @id="result-amount-" + numOfItems2 })
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y].LabourCost)
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y].TotalUnitRate)
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y].SupplierMaterialID, new { @id="suppliermaterialid-" + numOfItems2 })
										@Html.HiddenFor(m=>m.lists[i].Items[x].Subitems[y].Supplier)
										numOfItems2++;
									}
								}
							}
							
							@Html.HiddenFor(m=>m.TemplateID)
							@Html.HiddenFor(m=>m.ProjectID)
							@Html.HiddenFor(m=>m.FormulaID)
								  
							@Html.HiddenFor(m=>m.Wastage)
							@Html.HiddenFor(m=>m.Provisions)
							@Html.HiddenFor(m=>m.Markup)
							@Html.HiddenFor(m=>m.BOMCreationDate)
							@Html.HiddenFor(m=>m.totalCost)
								  
							@Html.HiddenFor(m=>m.Title)
							@Html.HiddenFor(m=>m.ClientName)
							@Html.HiddenFor(m=>m.ClientContact)
							@Html.HiddenFor(m=>m.Date)
							@Html.HiddenFor(m=>m.Address)
							@Html.HiddenFor(m=>m.City)
							@Html.HiddenFor(m=>m.Region)
							@Html.HiddenFor(m=>m.BuildingType)
							@Html.HiddenFor(m=>m.Country)
							@Html.HiddenFor(m=>m.Longtitude)
							@Html.HiddenFor(m=>m.Latitude)
							@Html.HiddenFor(m=>m.NumberOfStoreys)
							@Html.HiddenFor(m=>m.FloorHeight)
							@Html.HiddenFor(m=>m.BuildingLength)
							@Html.HiddenFor(m=>m.BuildingWidth)

						</div>

						<div class="scroll">
							<table class="table" width="150%">
								<thead style="position: sticky; top: 0;">
									<tr>
										<th></th>
										<th colspan="6">Proposed Materials</th>
										<th colspan="2">Cost Estimate</th>
									</tr>
									<tr>
										<th width="5%">Item No.</th>
										<th width="15%">Material Name</th>
										<th width="15%">Quantity</th>
										<th width="15%">With Wastage</th>
										<th width="15%">With Wastage + Provisions</th>
										<th width="5%">UoM</th>
										<th width="10%">Supplier</th>
										<th width="10%">Cost per unit</th>
										<th width="10%">Total Amount</th>
									</tr>
								</thead>
								<tbody>
									@for (int x = 0; x < Model.lists.Count; x++)
									{
										<tr style="background: #BBBBBB">
											<td>
											</td>
											<td colspan="8">@Model.lists[x].Description</td>
										</tr>
										@for (int y = 0; y < Model.lists[x].Items.Count; y++)
										{
											<tr style="background: #EEEEEE">
												<td>@Model.lists[x].Items[y].ItemNumber</td>
												<td colspan="8">@Model.lists[x].Items[y].Description</td>
											</tr>
											@for (int z = 0; z < Model.lists[x].Items[y].Subitems.Count; z++)
											{
												{
													<tr>
														<td>@Model.lists[x].Items[y].Subitems[z].SubitemNumber 
															<p hidden id="material-@numOfItems">@Model.lists[x].Items[y].Subitems[z].MaterialID</p></td>
														<td>@Model.lists[x].Items[y].Subitems[z].MaterialDesc</td>
														<td>@Model.lists[x].Items[y].Subitems[z].MaterialQuantity</td>
														<td>@Model.lists[x].Items[y].Subitems[z].MaterialQuantityWastage</td>
															<td><p id="number-@numOfItems">@Model.lists[x].Items[y].Subitems[z].MaterialQuantityProvisions</p></td>
														<td>@Model.lists[x].Items[y].Subitems[z].MaterialUoM</td>
														<td>@Html.DropDownListFor(m=>m.lists[x].Items[y].Subitems[z].SupplierID,
														new SelectList(Model.suppliers, "ID", "Description"), new { @id="select-"+numOfItems })
														</td>
														<td><p id="cost-@numOfItems">@string.Format("{0:N2}", Model.lists[x].Items[y].Subitems[z].MaterialCost)</p></td>
														<td><p id="result-@numOfItems"> @string.Format("{0:N2}", Model.lists[x].Items[y].Subitems[z].MaterialAmount)</p></td>
													</tr>
													numOfItems++;
												}
											}
										}
									}
									<tr style="background: #BBBBBB">
										<td colspan="8" style="text-align:right">Amount:</td>
										<td id="overallCost">@string.Format("{0:N2}", Model.totalCost)</td>
									</tr>
								</tbody>
							</table>
						</div>
						<input type="submit" name="Continue" value="Continue" class="a-button" />
					}
				</div>
			</section>
		</section>
	</div>

	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
	<script type="text/javascript">
		$(document).ready(function () {
			for (let i = 0; i < @numOfItems; i++) {
				$(`#select-${i}`).on('change', function () {
					// Get the selected option value
					const selectedValue = $(this).val();

					// Get the number from the first <p>
					const number = parseFloat($(`#number-${i}`).text());
					console.log('Selected value:', selectedValue);
					// Send an AJAX request to retrieve the multiplier
					$.ajax({
						url: '/Debug/GetMultiplier?param1=' + $(`#material-` + i).text(), 
						method: 'GET',
						data: { selectedValue: selectedValue },
						success: function (data) {
							// Calculate the result
							const cost = (data.Multiplier / 100);
							const supplier_price_id = data.ID;
							const result = number * cost;
							const formattedcost = cost.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
							const formattedresult = result.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
							// Update the second <p> with the result
							$(`#result-${i}`).text(`${formattedresult}`);
							$(`#cost-${i}`).text(`${formattedcost}`);
							$(`#result-amount-${i}`).val(`${result}`);
							$(`#suppliermaterialid-${i}`).val(`${supplier_price_id}`);
							AddAll();
							//$(`#supplier-price-id-${i}`).val(`${supplier_price_id}`);
						},
						error: function (error) {
							console.error(error);
						}
					});
				});
			}
		});
		function AddAll ()
		{
			let totalCost = 0;
			for (let i = 0; i < @numOfItems; i++)
			{
				totalCost = totalCost + document.getElementById('result-amount-' + i);
				document.getElementById('overallCost').textContent = totalCost;
			}
		}
	</script>
</body>