@{
    Layout = null;
}

@model EmployeeAddMaterial
<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
    <meta charset="UTF-8">
    <title> Add Project </title>
    <link rel="stylesheet" href="~/css/addContractor.css" asp-append-version="true" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	<style>
		.field-validation-valid {
			display: none;
		}

		.validation-summary-valid {
			display: none;
		}

		table {
			width: 100%; /* Set the table width to 100% of the container */
		}

			table td {
				padding: 5px;
			}

		td.column2 {
			width: 50%; /* Set the second column to occupy 50% of the table's width */
			vertical-align: top; /* Align content to the top of the cell */
		}

		#map {
			height: 100%; /* Fit the image to the height of the four rows */
			width: 100%; /* Fit the image to the width of its container */
		}

		.datepicker {
			display: inline-block;
		}
	</style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>
<body>

	<br />
	<br />
	<br />
	<br />
    <div class="container">
		<a class="dashboard-link" asp-area="" asp-controller="Employee" asp-action="employeeMaterialsDash">
            <div class="main-top">
                <i class="fas fa-user"></i>
            </div>
        </a>
        <div class="title">Add Material</div>
        <div class="content">
			@using (Html.BeginForm("employeeAddMaterial", "Employee", FormMethod.Post, new { @id = "myForm" }))
			{
				@Html.AntiForgeryToken()

				@Html.ValidationSummary(true, "", new { @class = "text-danger" })
				
				<div style="display: none">
					@Html.DisplayFor(m=>m.measurements)
					@for (int x = 0; x < Model.measurements.Count; x++)
					{
						@Html.HiddenFor(m=>m.measurements[x])
						@Html.HiddenFor(m=>m.measurements[x].ID)
						@Html.HiddenFor(m=>m.measurements[x].Description)
					}
					@Html.DisplayFor(m=>m.categories)
					@for (int x = 0; x < Model.categories.Count; x++)
					{
						@Html.HiddenFor(m=>m.categories[x])
						@Html.HiddenFor(m=>m.categories[x].ID)
						@Html.HiddenFor(m=>m.categories[x].Description)
					}
					@Html.DisplayFor(m=>m.measurement_type)
					@for (int x = 0; x < Model.measurement_type.Count; x++)
					{
						@Html.HiddenFor(m=>m.measurement_type[x])
						@Html.HiddenFor(m=>m.measurement_type[x].ID)
						@Html.HiddenFor(m=>m.measurement_type[x].Description)
					}
					@Html.HiddenFor(m=>m.ID)
				</div>

                <div class="user-details">
					<!--
                    <div class="input-box">
                        <span class="details">Project ID</span>
                        <input type="text" placeholder="Enter ID" required>
					</div>-->
                    <div class="input-box">
                        <span class="details">Material Name</span>
						@Html.TextBoxFor(m=>m.Description)
						@Html.ValidationMessageFor(m => m.MeasurementType, "Enter material name", new { @class = "text-danger"})
					</div>
					<div class="input-box">
						<span class="details">Material Description</span>
						@Html.TextBoxFor(m=>m.Description_Long)
						@Html.ValidationMessageFor(m => m.MeasurementType, "Enter material description", new { @class = "text-danger"})
					</div>
                    <div class="input-box">
						<span class="details">Material Category</span>
						@Html.DropDownListFor(m => m.CategoryID, new SelectList(Model.categories, "ID", "Description"), "Select category")
						@Html.ValidationMessageFor(m => m.MeasurementType, "Select a category", new { @class = "text-danger"})
                    </div>
                    <div class="input-box">
						<span class="details">Unit Of Measurement</span>
						@Html.DropDownListFor(m => m.UnitOfMeasurement, new SelectList(Model.measurements, "ID", "Description"), "Select unit of measurement")
						@Html.ValidationMessageFor(m => m.MeasurementType, "Select a unit of measurement", new { @class = "text-danger"})
                    </div>
                    <div class="input-box">
						<span class="details">Measurement Type</span>
						@Html.DropDownListFor(m => m.MeasurementType, new SelectList(Model.measurement_type, "ID", "Description"), "Select measurement type")
						@Html.ValidationMessageFor(m => m.MeasurementType, "Select a measurement type", new { @class = "text-danger"})
                    </div>
					<div class="input-box" >
						<span class="details">Measurement Value</span>
						@Html.TextBoxFor(m=>m.MeasurementValue, new { @class = ""})
						@Html.ValidationMessageFor(m => m.MeasurementType, "Enter measurement value", new { @class = "text-danger"})
                    </div>
				</div>
				
                <div class="button">
                    <input type="submit" value="Add Material">
                </div>
            }
        </div>
    </div>
	<link href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" rel="stylesheet">
	<script src="//code.jquery.com/jquery-3.6.0.min.js"></script>
	<script src="//code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
	
	<script src="@Url.Content("~/Scripts/jquery.validate.js")" type="text/javascript"></script>
	<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")" type="text/javascript"></script>
</body>
</html>